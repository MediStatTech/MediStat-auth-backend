// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: staff_roles.sql

package staff_roles

import (
	"context"
)

const createStaffRole = `-- name: CreateStaffRole :one
INSERT INTO staff_roles (code, name)
VALUES ($1, $2)
RETURNING role_id, code, name
`

type CreateStaffRoleParams struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

func (q *Queries) CreateStaffRole(ctx context.Context, arg CreateStaffRoleParams) (StaffRole, error) {
	row := q.queryRow(ctx, q.createStaffRoleStmt, createStaffRole, arg.Code, arg.Name)
	var i StaffRole
	err := row.Scan(&i.RoleID, &i.Code, &i.Name)
	return i, err
}

const deleteStaffRole = `-- name: DeleteStaffRole :exec
DELETE FROM staff_roles
WHERE role_id = $1
`

func (q *Queries) DeleteStaffRole(ctx context.Context, roleID int32) error {
	_, err := q.exec(ctx, q.deleteStaffRoleStmt, deleteStaffRole, roleID)
	return err
}

const getStaffRole = `-- name: GetStaffRole :one
SELECT role_id, code, name FROM staff_roles
WHERE role_id = $1
`

func (q *Queries) GetStaffRole(ctx context.Context, roleID int32) (StaffRole, error) {
	row := q.queryRow(ctx, q.getStaffRoleStmt, getStaffRole, roleID)
	var i StaffRole
	err := row.Scan(&i.RoleID, &i.Code, &i.Name)
	return i, err
}

const getStaffRoleByCode = `-- name: GetStaffRoleByCode :one
SELECT role_id, code, name FROM staff_roles
WHERE code = $1
`

func (q *Queries) GetStaffRoleByCode(ctx context.Context, code string) (StaffRole, error) {
	row := q.queryRow(ctx, q.getStaffRoleByCodeStmt, getStaffRoleByCode, code)
	var i StaffRole
	err := row.Scan(&i.RoleID, &i.Code, &i.Name)
	return i, err
}

const listStaffRoles = `-- name: ListStaffRoles :many
SELECT role_id, code, name FROM staff_roles
ORDER BY role_id
`

func (q *Queries) ListStaffRoles(ctx context.Context) ([]StaffRole, error) {
	rows, err := q.query(ctx, q.listStaffRolesStmt, listStaffRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StaffRole{}
	for rows.Next() {
		var i StaffRole
		if err := rows.Scan(&i.RoleID, &i.Code, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStaffRole = `-- name: UpdateStaffRole :one
UPDATE staff_roles
SET name = $2
WHERE role_id = $1
RETURNING role_id, code, name
`

type UpdateStaffRoleParams struct {
	RoleID int32  `json:"role_id"`
	Name   string `json:"name"`
}

func (q *Queries) UpdateStaffRole(ctx context.Context, arg UpdateStaffRoleParams) (StaffRole, error) {
	row := q.queryRow(ctx, q.updateStaffRoleStmt, updateStaffRole, arg.RoleID, arg.Name)
	var i StaffRole
	err := row.Scan(&i.RoleID, &i.Code, &i.Name)
	return i, err
}
