// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package personal

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createPersonalStmt, err = db.PrepareContext(ctx, createPersonal); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePersonal: %w", err)
	}
	if q.existsPersonalByEmailStmt, err = db.PrepareContext(ctx, existsPersonalByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsPersonalByEmail: %w", err)
	}
	if q.getAllPersonalStmt, err = db.PrepareContext(ctx, getAllPersonal); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllPersonal: %w", err)
	}
	if q.getPersonalByEmailStmt, err = db.PrepareContext(ctx, getPersonalByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetPersonalByEmail: %w", err)
	}
	if q.getPersonalByIDStmt, err = db.PrepareContext(ctx, getPersonalByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPersonalByID: %w", err)
	}
	if q.updatePersonalStmt, err = db.PrepareContext(ctx, updatePersonal); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePersonal: %w", err)
	}
	if q.updatePersonalStatusStmt, err = db.PrepareContext(ctx, updatePersonalStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePersonalStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createPersonalStmt != nil {
		if cerr := q.createPersonalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPersonalStmt: %w", cerr)
		}
	}
	if q.existsPersonalByEmailStmt != nil {
		if cerr := q.existsPersonalByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsPersonalByEmailStmt: %w", cerr)
		}
	}
	if q.getAllPersonalStmt != nil {
		if cerr := q.getAllPersonalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllPersonalStmt: %w", cerr)
		}
	}
	if q.getPersonalByEmailStmt != nil {
		if cerr := q.getPersonalByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPersonalByEmailStmt: %w", cerr)
		}
	}
	if q.getPersonalByIDStmt != nil {
		if cerr := q.getPersonalByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPersonalByIDStmt: %w", cerr)
		}
	}
	if q.updatePersonalStmt != nil {
		if cerr := q.updatePersonalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePersonalStmt: %w", cerr)
		}
	}
	if q.updatePersonalStatusStmt != nil {
		if cerr := q.updatePersonalStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePersonalStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	createPersonalStmt        *sql.Stmt
	existsPersonalByEmailStmt *sql.Stmt
	getAllPersonalStmt        *sql.Stmt
	getPersonalByEmailStmt    *sql.Stmt
	getPersonalByIDStmt       *sql.Stmt
	updatePersonalStmt        *sql.Stmt
	updatePersonalStatusStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		createPersonalStmt:        q.createPersonalStmt,
		existsPersonalByEmailStmt: q.existsPersonalByEmailStmt,
		getAllPersonalStmt:        q.getAllPersonalStmt,
		getPersonalByEmailStmt:    q.getPersonalByEmailStmt,
		getPersonalByIDStmt:       q.getPersonalByIDStmt,
		updatePersonalStmt:        q.updatePersonalStmt,
		updatePersonalStatusStmt:  q.updatePersonalStatusStmt,
	}
}
