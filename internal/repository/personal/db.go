// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package personal

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countActivePersonalStmt, err = db.PrepareContext(ctx, countActivePersonal); err != nil {
		return nil, fmt.Errorf("error preparing query CountActivePersonal: %w", err)
	}
	if q.countPersonalByRoleStmt, err = db.PrepareContext(ctx, countPersonalByRole); err != nil {
		return nil, fmt.Errorf("error preparing query CountPersonalByRole: %w", err)
	}
	if q.createPersonalStmt, err = db.PrepareContext(ctx, createPersonal); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePersonal: %w", err)
	}
	if q.deletePersonalStmt, err = db.PrepareContext(ctx, deletePersonal); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePersonal: %w", err)
	}
	if q.dismissPersonalStmt, err = db.PrepareContext(ctx, dismissPersonal); err != nil {
		return nil, fmt.Errorf("error preparing query DismissPersonal: %w", err)
	}
	if q.getPersonalByEmailStmt, err = db.PrepareContext(ctx, getPersonalByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetPersonalByEmail: %w", err)
	}
	if q.getPersonalByIDStmt, err = db.PrepareContext(ctx, getPersonalByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPersonalByID: %w", err)
	}
	if q.listPersonalStmt, err = db.PrepareContext(ctx, listPersonal); err != nil {
		return nil, fmt.Errorf("error preparing query ListPersonal: %w", err)
	}
	if q.listPersonalByDepartmentStmt, err = db.PrepareContext(ctx, listPersonalByDepartment); err != nil {
		return nil, fmt.Errorf("error preparing query ListPersonalByDepartment: %w", err)
	}
	if q.listPersonalByRoleStmt, err = db.PrepareContext(ctx, listPersonalByRole); err != nil {
		return nil, fmt.Errorf("error preparing query ListPersonalByRole: %w", err)
	}
	if q.restorePersonalStmt, err = db.PrepareContext(ctx, restorePersonal); err != nil {
		return nil, fmt.Errorf("error preparing query RestorePersonal: %w", err)
	}
	if q.searchPersonalStmt, err = db.PrepareContext(ctx, searchPersonal); err != nil {
		return nil, fmt.Errorf("error preparing query SearchPersonal: %w", err)
	}
	if q.updatePersonalStmt, err = db.PrepareContext(ctx, updatePersonal); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePersonal: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countActivePersonalStmt != nil {
		if cerr := q.countActivePersonalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countActivePersonalStmt: %w", cerr)
		}
	}
	if q.countPersonalByRoleStmt != nil {
		if cerr := q.countPersonalByRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countPersonalByRoleStmt: %w", cerr)
		}
	}
	if q.createPersonalStmt != nil {
		if cerr := q.createPersonalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPersonalStmt: %w", cerr)
		}
	}
	if q.deletePersonalStmt != nil {
		if cerr := q.deletePersonalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePersonalStmt: %w", cerr)
		}
	}
	if q.dismissPersonalStmt != nil {
		if cerr := q.dismissPersonalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dismissPersonalStmt: %w", cerr)
		}
	}
	if q.getPersonalByEmailStmt != nil {
		if cerr := q.getPersonalByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPersonalByEmailStmt: %w", cerr)
		}
	}
	if q.getPersonalByIDStmt != nil {
		if cerr := q.getPersonalByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPersonalByIDStmt: %w", cerr)
		}
	}
	if q.listPersonalStmt != nil {
		if cerr := q.listPersonalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPersonalStmt: %w", cerr)
		}
	}
	if q.listPersonalByDepartmentStmt != nil {
		if cerr := q.listPersonalByDepartmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPersonalByDepartmentStmt: %w", cerr)
		}
	}
	if q.listPersonalByRoleStmt != nil {
		if cerr := q.listPersonalByRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPersonalByRoleStmt: %w", cerr)
		}
	}
	if q.restorePersonalStmt != nil {
		if cerr := q.restorePersonalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing restorePersonalStmt: %w", cerr)
		}
	}
	if q.searchPersonalStmt != nil {
		if cerr := q.searchPersonalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchPersonalStmt: %w", cerr)
		}
	}
	if q.updatePersonalStmt != nil {
		if cerr := q.updatePersonalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePersonalStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	countActivePersonalStmt      *sql.Stmt
	countPersonalByRoleStmt      *sql.Stmt
	createPersonalStmt           *sql.Stmt
	deletePersonalStmt           *sql.Stmt
	dismissPersonalStmt          *sql.Stmt
	getPersonalByEmailStmt       *sql.Stmt
	getPersonalByIDStmt          *sql.Stmt
	listPersonalStmt             *sql.Stmt
	listPersonalByDepartmentStmt *sql.Stmt
	listPersonalByRoleStmt       *sql.Stmt
	restorePersonalStmt          *sql.Stmt
	searchPersonalStmt           *sql.Stmt
	updatePersonalStmt           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		countActivePersonalStmt:      q.countActivePersonalStmt,
		countPersonalByRoleStmt:      q.countPersonalByRoleStmt,
		createPersonalStmt:           q.createPersonalStmt,
		deletePersonalStmt:           q.deletePersonalStmt,
		dismissPersonalStmt:          q.dismissPersonalStmt,
		getPersonalByEmailStmt:       q.getPersonalByEmailStmt,
		getPersonalByIDStmt:          q.getPersonalByIDStmt,
		listPersonalStmt:             q.listPersonalStmt,
		listPersonalByDepartmentStmt: q.listPersonalByDepartmentStmt,
		listPersonalByRoleStmt:       q.listPersonalByRoleStmt,
		restorePersonalStmt:          q.restorePersonalStmt,
		searchPersonalStmt:           q.searchPersonalStmt,
		updatePersonalStmt:           q.updatePersonalStmt,
	}
}
