// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: personal.sql

package personal

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPersonal = `-- name: CreatePersonal :one
INSERT INTO personal (
    personal_id,
    first_name,
    last_name,
    email,
    phone,
    password_hash,
    status,
    departure,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING personal_id, first_name, last_name, email, password_hash, phone, status, departure, created_at, updated_at
`

type CreatePersonalParams struct {
	PersonalID   uuid.UUID      `json:"personal_id"`
	FirstName    string         `json:"first_name"`
	LastName     string         `json:"last_name"`
	Email        string         `json:"email"`
	Phone        sql.NullString `json:"phone"`
	PasswordHash string         `json:"password_hash"`
	Status       string         `json:"status"`
	Departure    string         `json:"departure"`
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreatePersonal(ctx context.Context, arg CreatePersonalParams) (Personal, error) {
	row := q.queryRow(ctx, q.createPersonalStmt, createPersonal,
		arg.PersonalID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.PasswordHash,
		arg.Status,
		arg.Departure,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Personal
	err := row.Scan(
		&i.PersonalID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.Status,
		&i.Departure,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const existsPersonalByEmail = `-- name: ExistsPersonalByEmail :one
SELECT EXISTS(
    SELECT 1
    FROM personal
    WHERE email = $1
) AS exists
`

func (q *Queries) ExistsPersonalByEmail(ctx context.Context, email string) (bool, error) {
	row := q.queryRow(ctx, q.existsPersonalByEmailStmt, existsPersonalByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAllPersonal = `-- name: GetAllPersonal :many
SELECT personal_id, first_name, last_name, email, password_hash, phone, status, departure, created_at, updated_at FROM personal
ORDER BY created_at DESC
`

func (q *Queries) GetAllPersonal(ctx context.Context) ([]Personal, error) {
	rows, err := q.query(ctx, q.getAllPersonalStmt, getAllPersonal)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Personal{}
	for rows.Next() {
		var i Personal
		if err := rows.Scan(
			&i.PersonalID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PasswordHash,
			&i.Phone,
			&i.Status,
			&i.Departure,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonalByEmail = `-- name: GetPersonalByEmail :one
SELECT personal_id, first_name, last_name, email, password_hash, phone, status, departure, created_at, updated_at FROM personal
WHERE email = $1
`

func (q *Queries) GetPersonalByEmail(ctx context.Context, email string) (Personal, error) {
	row := q.queryRow(ctx, q.getPersonalByEmailStmt, getPersonalByEmail, email)
	var i Personal
	err := row.Scan(
		&i.PersonalID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.Status,
		&i.Departure,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPersonalByID = `-- name: GetPersonalByID :one
SELECT personal_id, first_name, last_name, email, password_hash, phone, status, departure, created_at, updated_at FROM personal
WHERE personal_id = $1
`

func (q *Queries) GetPersonalByID(ctx context.Context, personalID uuid.UUID) (Personal, error) {
	row := q.queryRow(ctx, q.getPersonalByIDStmt, getPersonalByID, personalID)
	var i Personal
	err := row.Scan(
		&i.PersonalID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.Status,
		&i.Departure,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePersonal = `-- name: UpdatePersonal :one
UPDATE personal
SET
    first_name = $2,
    last_name = $3,
    email = $4,
    phone = $5,
    status = $6,
    departure = $7,
    updated_at = $8
WHERE personal_id = $1
RETURNING personal_id, first_name, last_name, email, password_hash, phone, status, departure, created_at, updated_at
`

type UpdatePersonalParams struct {
	PersonalID uuid.UUID      `json:"personal_id"`
	FirstName  string         `json:"first_name"`
	LastName   string         `json:"last_name"`
	Email      string         `json:"email"`
	Phone      sql.NullString `json:"phone"`
	Status     string         `json:"status"`
	Departure  string         `json:"departure"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
}

func (q *Queries) UpdatePersonal(ctx context.Context, arg UpdatePersonalParams) (Personal, error) {
	row := q.queryRow(ctx, q.updatePersonalStmt, updatePersonal,
		arg.PersonalID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Status,
		arg.Departure,
		arg.UpdatedAt,
	)
	var i Personal
	err := row.Scan(
		&i.PersonalID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.Status,
		&i.Departure,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePersonalStatus = `-- name: UpdatePersonalStatus :one
UPDATE personal
SET
    status = $2,
    updated_at = $3
WHERE personal_id = $1
RETURNING personal_id, first_name, last_name, email, password_hash, phone, status, departure, created_at, updated_at
`

type UpdatePersonalStatusParams struct {
	PersonalID uuid.UUID    `json:"personal_id"`
	Status     string       `json:"status"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
}

func (q *Queries) UpdatePersonalStatus(ctx context.Context, arg UpdatePersonalStatusParams) (Personal, error) {
	row := q.queryRow(ctx, q.updatePersonalStatusStmt, updatePersonalStatus, arg.PersonalID, arg.Status, arg.UpdatedAt)
	var i Personal
	err := row.Scan(
		&i.PersonalID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.Status,
		&i.Departure,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
